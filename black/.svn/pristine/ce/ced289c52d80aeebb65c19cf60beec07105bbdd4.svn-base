package com.commons.interceptor;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.commons.web.SpringUtil;

public class AuthInterceptors implements HandlerInterceptor {
	
	/** 
     * 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。
     * 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行， 这个方法的主要作用是用于清理资源的，
     */
	@Override
	public void afterCompletion(HttpServletRequest arg0,
			HttpServletResponse arg1, Object arg2, Exception arg3)
			throws Exception {
		// TODO Auto-generated method stub
		System.out.println("afterCompletion");
	}
	/**
     * 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。
     * postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之 后， 也就是在Controller的方法调用之后执行，
     * 但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。
     * 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用，
     * 这跟Struts2里面的拦截器的执行过程有点像，
     * 只是Struts2里面的intercept方法中要手动的调用ActionInvocation的invoke方法，
     * Struts2中调用ActionInvocation的invoke方法就是调用下一个Interceptor或者是调用action，
     * 然后要在Interceptor之前调用的内容都写在调用invoke之前，要在Interceptor之后调用的内容都写在调用invoke方法之后。
     */
	@Override
	public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,
			Object arg2, ModelAndView arg3) throws Exception {
		// TODO Auto-generated method stub
		
		System.out.println("postHandle");
		
		
	}
	 /**
     * preHandle方法是进行处理器拦截用的，顾名思义，该方法将在Controller处理之前进行调用，
     * SpringMVC中的Interceptor拦截器是链式的，可以同时存在多个Interceptor，
     * 然后SpringMVC会根据声明的前后顺序一个接一个的执行，
     * 而且所有的Interceptor中的preHandle方法都会在Controller方法调用之前调用。
     * SpringMVC的这种Interceptor链式结构也是可以进行中断的，
     * 这种中断方式是令preHandle的返回值为false，当preHandle的返回值为false的时候整个请求就结束了。
     */
	@SuppressWarnings("unchecked")
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response,Object handler) throws Exception {
		//请求地址
		String requestUrl = request.getRequestURI(); 
		LogUtil.info(getClass(), "进入拦截器：" + requestUrl);
		
		//获取作用域中的用户
		Map<String, String> userMap = (Map<String, String>)SpringUtil.getServleContextAttribute("userMap");
		if(userMap != null){
			Object userId = request.getSession().getAttribute("userId");
			if(userId == null){
				LogUtil.info(getClass(), "用户ID：" + userId + " , 当前用户已登陆超时!");
				response.sendRedirect(request.getContextPath() + "/login.jsp");
			}else{
				//当前用的sessionID
				String sessionId = userMap.get(userId);
				if(!request.getSession().getId().equals(sessionId)){
					LogUtil.info(getClass(), "用户ID：" + userId + " , 当前用户已在其他地点登陆!");
				}else{
					LogUtil.info(getClass(), "用户ID：" + userId + " , 在线...");
					return true;
				}
			}
		}else{
			LogUtil.info(getClass(), "当前用户未登陆...");
			response.sendRedirect(request.getContextPath() + "/login.jsp");
		}
		return false;
	}
}
